//
// NewAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import UIKit
import RealmSwift


// MARK: public

extension NewAPI{

    /**
     刷新新闻方法 根据提供的cid
     根据提供的额delete create 参数 进行一些细节的 操作
     
     - parameter cid:      频道ID
     - parameter tcr:      时间参数
     - parameter delete:   是或否删除多余的新闻
     - parameter create:   创建一条标示性 新闻
     - parameter complete: 完成方法
     */
    class func RefreshNew(cid: Int, tcr: String = Date.unixTimeString,delete:Bool = false,create:Bool = true,complete:@escaping ((Bool)->Void)){
    
        self.nsFedRGet(cid: "\(cid)", tcr: tcr) { (data, error) in
            
            if let code = data?.object(forKey: "code") as? Int , code == 4003 { complete(false) ; return ShareLUserRequest.resetLogin() }
            
            if let code = data?.object(forKey: "code") as? Int , code == 2000,let datas = data?.object(forKey: "data") as? NSArray{
                
                let realm = try! Realm()
                
                try! realm.write({
                    
                    for channel in datas {
                        
                        realm.create(New.self, value: channel, update: true)
                        
                        self.AnalysisPutTimeAndImageList(cid,channel: channel as! NSDictionary, realm: realm)
                    }
                    
                    if create && datas.count > 0 {  New.CreateIdentification(tcr, cid: cid, realm: realm) }
                })
                
                return complete( true)
            }
            
            complete(true)
        }
    }
    
    /**
     读取更多新闻
     
     - parameter cid: 频道ID
     - parameter tcr: 时间参数
     */
    class func LoadNew(cid: Int, tcr: String = Date.unixTimeString,complete:@escaping ((Bool)->Void)){
    
        self.nsFedLGet(cid: "\(cid)", tcr: tcr) { (data, error) in
            
            if let code = data?.object(forKey: "code") as? Int , code == 4003 { complete(false) ; return ShareLUserRequest.resetLogin() }
            
            if let code = data?.object(forKey: "code") as? Int , code == 2000,let datas = data?.object(forKey: "data") as? NSArray{
            
                let realm = try! Realm()
                
                try! realm.write({
                    
                    for channel in datas {
                        
                        if let nid = (channel as AnyObject).object(forKey: "nid") as? Int  {
                        
                            if let new = realm.object(ofType: New.self, forPrimaryKey: nid as AnyObject),new.channelList.filter("channel = %@",cid).count > 0 { continue }
                            
                            realm.create(New.self, value: channel, update: true)
                            
                            self.AnalysisPutTimeAndImageList(cid,channel: channel as! NSDictionary, realm: realm)
                        }
                    }
                })
                
                return complete(true)
            }
            
            complete( true)
        }
    }
    
    /**
     根据提供的 新闻的ID 获取新闻的详情
     
     - parameter nid:    新闻ID
     - parameter finish: 完成
     - parameter fail:   失败
     */
    class func GetnewContent(_ nid:Int,finish:((_ newCon:NewContent)->Void)?=nil,fail:(()->Void)?=nil){
    
        NewAPI.nsConGet(nid: "\(nid)") { (data, error) in
            
            let realm = try! Realm()
            
            guard let da = data, let datas = da.object(forKey: "data") as? NSDictionary else{  fail?();return}
            
            try! realm.write({
                
                realm.create(NewContent.self, value: datas, update: true)
                
                self.AnalysisNewContents(datas, realm: realm)
            })
            
            let newContengt = realm.objects(NewContent.self).filter("nid = \(nid)").first
            
            finish?(newContengt!)
        }
    }
}









// MARK: private
private extension NewAPI{
    
    /// 初始化一个 String Obj 对象
    private class func initStringObject(value: String) -> StringObject{
        
        let stringObj = StringObject()
        
        stringObj.value = value
        
        return stringObj
    }
    
    // 完善新闻事件
    class func AnalysisPutTimeAndImageList(_ cid: Int,channel:NSDictionary,realm:Realm){
        
        guard let nid = channel.object(forKey: "nid") as? Int else { return }
        
        if let pubTime = channel.object(forKey: "ptime") as? String {
            
            realm.create(New.self, value: ["nid":nid,"ptimes": Date(fromString: pubTime, format: DateFormat.custom("yyyy-MM-dd HH:mm:ss"))], update: true)
        }
        
        if let imageList = channel.object(forKey: "imgs") as? [String] {
            
            let imgList = imageList.map({ self.initStringObject(value: $0) })
            
            realm.create(New.self, value: ["nid":nid,"imgsList":imgList], update: true)
        }
        
        if let new = realm.object(ofType: New.self, forPrimaryKey: nid){
            
            guard let chanObj = new.channelList.filter("channel = %@",cid).first else {
                
                let interObj = IntegetObject()
                
                interObj.channel = cid
                
                new.channelList.append(interObj)
                
                return
            }
        }
    }
    
    /**
     完善
     
     - parameter channel: <#channel description#>
     - parameter realm:   <#realm description#>
     */
    class func AnalysisNewContents(_ channel:NSDictionary,realm:Realm){
        
        if let nid = channel.object(forKey: "nid") as? Int {
            
            if let tagList = channel.object(forKey: "tags") as? [String] {
                
                let tagsList = tagList.map({ self.initStringObject(value: $0) })
                
                realm.create(NewContent.self, value: ["nid":nid,"tags":tagsList], update: true)
            }
        }
    }
}

private extension Date{
    
    /// 当前时间的 UNix 时间戳
    static var unixTimeString:String{ return "\(Int64(Date().timeIntervalSince1970*1000))" }
}

extension New{
    
    /**
     根据 提供的频道ID 删除过多的 新闻，主要用于用户刚刚进入频道视图 下拉刷新的额时候 进行的操作
     
     - parameter cid:   频道ID
     - parameter realm: 数据库操作对象
     */
    class func DeleteBecTooMore(cid:Int) -> Int{
        
        let realm = try! Realm()
        
        let objects = realm.objects(New.self).sorted(byProperty: "ptimes", ascending: false).filter("ANY channelList.channel = %@ AND isdelete = 0 AND isidentification = 0",cid)
        
        if objects.count > 16 {
            
            try! realm.write {
                
                let willDel = objects.filter("ptimes < %@ ", objects[15].ptimes)
                
                for new in willDel {
                    
                    if let int = new.channelList.filter("channel = %@", cid).first {
                        
                        realm.delete(int)
                    }
                }
            }
        }
        return objects.count
    }

    
    /**
     根据提供的频道ID 创建 标示 新闻对象
     
     - parameter tcr:   创建对比时间
     - parameter cid:   频道ID
     - parameter realm: 数据库操作对象
     */
    class func CreateIdentification(_ tcr:String,cid:Int,realm:Realm){
        
        let date = Date(timeIntervalSince1970: ((tcr as NSString).doubleValue+1)/1000)
        
        let nid = cid == 1 ? -100 : -cid
        
        realm.create(New.self, value: ["nid":nid,"channel": cid,"isidentification":1,"ishotnew":cid == 1 ? 1 : 0,"ptimes":date], update: true)
        
        //        try! realm.write({
        //
        //            
        //        })
    }
}
















class NewAPI {

    
    /**
     新闻列表页刷新
     
     - parameter cid: (query) 频道id
     - parameter tcr: (query) 起始时间，13位时间戳
     - parameter tmk: (query) 是(1)否(0)模拟实时发布时间(部分新闻的发布时间修改为5分钟以内) (optional, default to 1)
     - parameter p: (query) 页数 (optional, default to 1)
     - parameter c: (query) 条数 (optional, default to 20)
     - parameter completion: completion handler to receive the data and the error objects
     */
    class func nsFedRGet(cid: String, tcr: String, tmk: String? = "0", p: String? = nil, c: String? = nil, completion: @escaping ((_ data: AnyObject?, _ error: Swift.Error?) -> Void)) {
        ShareLUser.getSdkUserToken { (token) in
            
            let path = "/ns/fed/rn"
            let URLString = SimpleRequest.basePath + path
            
            let nillableParameters: [String:AnyObject?] = [
                "cid": cid as Optional<AnyObject>,
                "tcr": tcr as Optional<AnyObject>,
                "tmk": tmk as Optional<AnyObject>,
                "p": p as Optional<AnyObject>,
                "c": c as Optional<AnyObject>,
                "uid": "\(ShareLUser.uid)" as Optional<AnyObject>
            ]
            
            let parameters = APIHelper.rejectNil(nillableParameters)
            
            let convertedParameters = APIHelper.convertBoolToString(parameters)
            
            var request = SimpleRequest.budileRequest(URLString, method: .get, parameters: convertedParameters, encoding: URLEncoding.default, headers: ["Authorization":token]).request(completionHandler: { (data, _, _) in
                
                completion(data as AnyObject?, nil)
            })
        }
    }
    
    /**
     新闻列表页加载
     
     - parameter cid: (query) 频道id
     - parameter tcr: (query) 起始时间，13位时间戳
     - parameter tmk: (query) 是(1)否(0)模拟实时发布时间(部分新闻的发布时间修改为5分钟以内) (optional, default to 1)
     - parameter p: (query) 页数 (optional, default to 1)
     - parameter c: (query) 条数 (optional, default to 20)
     - parameter completion: completion handler to receive the data and the error objects
     */
    class func nsFedLGet(cid: String, tcr: String, tmk: String? = "0", p: String? = nil, c: String? = nil, completion: @escaping ((_ data: AnyObject?, _ error: Swift.Error?) -> Void)) {
        ShareLUser.getSdkUserToken { (token) in
            
            let path = "/ns/fed/ln"
            let URLString = SimpleRequest.basePath + path
            
            let nillableParameters: [String:AnyObject?] = [
                "cid": cid as Optional<AnyObject>,
                "tcr": tcr as Optional<AnyObject>,
                "tmk": tmk as Optional<AnyObject>,
                "p": p as Optional<AnyObject>,
                "c": c as Optional<AnyObject>,
                "uid": "\(ShareLUser.uid)" as Optional<AnyObject>
            ]
            
            let parameters = APIHelper.rejectNil(nillableParameters)
            
            let convertedParameters = APIHelper.convertBoolToString(parameters)
            
            SimpleRequest.budileRequest(URLString, method: .get, parameters: convertedParameters, encoding: URLEncoding.default, headers: ["Authorization":token]).request(completionHandler: { (data, _, _) in
                completion(data as AnyObject?, nil)
            })
        }
    }
    
    
    /**
     新闻详情页
     
     - parameter nid: (query) 新闻ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    class func nsConGet(nid: String, completion: @escaping ((_ data: AnyObject?, _ error: Swift.Error?) -> Void)) {
        let path = "/ns/con"
        let URLString = SimpleRequest.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "nid": nid as Optional<AnyObject>
        ]
        
        let parameters = APIHelper.rejectNil(nillableParameters)
        
        let convertedParameters = APIHelper.convertBoolToString(parameters)
        
        SimpleRequest.budileRequest(URLString, method: .get, parameters: convertedParameters, encoding: URLEncoding.default, headers:nil).request(completionHandler: { (data, _, _) in
            completion(data as AnyObject?, nil)
        })
    }
}
